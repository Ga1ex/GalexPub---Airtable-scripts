const table=base.getTable('uploader')
const dest=await input.tableAsync('Where to upload?')
const rec=await input.recordAsync('',table)
if(!rec) throw new Error(`No rec defined`)
const data=rec.getCellValue('Files')
if(!data) throw new Error('Nothing to upload')
const fld=dest.fields.filter(f=>f.type.toString()=='multipleAttachments')
if(!fld) throw new Error(`No attachment fields in ${dest.name}`)
const myfld=(fld.length>1)? await input.buttonsAsync('Choose field',fld.map(f=>f.name)):fld.pop()?.name||''
output.text(`Field to store files: ${myfld} `)
const imgurl=await input.fieldAsync('Which field contain filenames, to put files in respective records?',dest)
const IMG=imgurl.name
await table.updateRecordAsync(rec,{'Status':{name:'LOADING'}})

const query=await dest.selectRecordsAsync({fields:[IMG]})
const fname=el=>el.filename.split('/').pop()
output.text('Locating filenames...')
const rec_id=el=>query.records.find(r=>r.getCellValue(IMG)?.includes(fname(el)))?.id||'not_found'
const writer=data.reduce((a,e)=>a.set(rec_id(e),[...a.get(rec_id(e))||[], e]),new Map())
output.text('Done')
output.inspect(writer)
const update=r=>({[myfld]:[...check(r).map(file=>({url:file.url})),...r.getCellValue(myfld)]})
const notfound=writer.has('not_found')? writer.get('not_found'):null
if(notfound) writer.delete('not_found')
const existing=rec=>rec.getCellValue(myfld).map(x=>x.filename)
const check=rid=>writer.get(rid).filter(img=>!existing(rid).includes(img.filename))

const upd=[...writer.keys()].map(k=>({id:k,fields:update(k)}))
output.text(`Uploading photos: ${data.length-(notfound?.length||0)} \n Records to be updated : ${upd.length}`)
//console.log(upd)
while (upd.length) await dest.updateRecordsAsync(upd.splice(0,50))
output.text('Done. Press button to Clean cell or exit without cleaning.')
if(notfound) output.text (`Unable to locate place for ${notfound.length} photo${notfound.length>1? 's':''} . They remain in cell, please review`)
const ask=await input.buttonsAsync('Select: ', ['Clean', 'Exit'])
if(ask=='Clean') await table.updateRecordAsync(rec.id,{'Files':notfound? notfound:[]})
await table.updateRecordAsync(rec,{'Status':{name:'idle'}})
output.text('Script completed')
